@using SettlementManager.Contract
@using SettlementManager.Messaging.Request
@using SettlementManager.Messaging.View
@using SettlementManager.Model
@using SettlementManager.Razor.Shared.Pages
@using Blazored.Typeahead;

@inject ISettlementService _settlementService;
@inject ICountryService _countryService;

<div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">  
    <div class="modal-dialog" role="document">  
        <div class="modal-content">  
            <div class="modal-header">  
                <h5 class="modal-title" id="titleLabel">Update Settlement</h5>  
                <button type="button" class="close"  data-dismiss="modal" @onclick="Close" aria-label="Close">  
                    <span aria-hidden="true">×</span>  
                </button>  
            </div>  
            <div class="modal-body">  
                @if (Loading)
                {
                    <div class="d-flex justify-content-center">
                      <div class="spinner-border" role="status">
                      </div>
                   </div>
                }
                else
                {
                     <EditForm Model="@UpdateSettlement" OnValidSubmit="@UpdateSettlementAsync">  
                    <DataAnnotationsValidator />  
                    <div class="form-group">  
                        <label for="name">Name: </label>  
                        <InputText id="name" class="form-control" @bind-Value="@UpdateSettlement.Name" placeholder="Enter name"></InputText>  
                        <ValidationMessage For="@(() => UpdateSettlement.Name)" />  
                    </div>  
                    <br />
                    <div class="form-group">  
                        <label for="psotalCode">Postal Code: </label>  
                        <InputText id="psotalCode" class="form-control" @bind-Value="@UpdateSettlement.PostalCode" placeholder="Enter postal code"></InputText>  
                        <ValidationMessage For="@(() => UpdateSettlement.PostalCode)" />  
                    </div> 
                    <br />
                @*    <div class="form-group">  
                        <label for="psotalCode">Country: </label>  
                        <InputSelect @bind-Value=@UpdateSettlement.CountryId>
                            @foreach (var display in Countries)
                            {
                                <option value=@display.Id>@display.Name</option>
                            }
                        </InputSelect> 
                        <ValidationMessage For="@(() => UpdateSettlement.CountryId)" />  
                    </div>*@
                     <div class="form-group">
                        <label for="country">Country: </label>
                              <BlazoredTypeahead
                        SearchMethod="SearchCountries"
                        ConvertMethod="ConvertCountry"
                        MinimumLength="2"
                        @bind-Value="@UpdateSettlement.CountryId"
                        placeholder="Search by country name..."
                        >
                        <SelectedTemplate Context="countryId">
                        @{
                        var selectedCountry = LoadSelectedCountry(countryId);

                        <text>@selectedCountry?.Name</text>
                        }
                        </SelectedTemplate>
                        <ResultTemplate Context="country">
                        @country.Name
                        </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <br>                   
                    <button type="submit" class="btn btn-primary">Update Settlement</button>  
                    <a class="btn btn-outline-primary" @onclick="@Close">Close</a>  
                </EditForm>  
                }
            </div>  
        </div>  
    </div>  
</div>  

@code {
    [CascadingParameter]
    private Settlements _Parent { get; set; }

    [Parameter]
    public bool ShowUpdateSettlementModal { get; set; }
    [Parameter]
    public EventCallback<bool> ShowUpdateSettlementModalChanged { get; set; }

    [Parameter]
    public SettlementView SelectedSettlement { get; set; }

    private UpdateSettlementView UpdateSettlement { get; set; }
    private IEnumerable<CountryView> Countries { get; set; }

    private bool Loading { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        UpdateSettlement = new UpdateSettlementView
        {
            Id = SelectedSettlement.Id,
            Name = SelectedSettlement.Name,
            PostalCode = SelectedSettlement.PostalCode,
            CountryId = SelectedSettlement.Country.Id
        };

        var response = await _countryService.GetCountriesAsync(new GetCountriesRequest());
        Countries = response.Countries;

        Loading = false;
    }

    private async Task UpdateSettlementAsync()
    {
        await _settlementService.UpdateSettlementAsync(
            new UpdateSettlementRequest
                {
                    Settlement = UpdateSettlement
                }
        );

        ShowUpdateSettlementModal = false;
        await ShowUpdateSettlementModalChanged.InvokeAsync(ShowUpdateSettlementModal);
        await _Parent.InitializeSettlements();
    }

    public async Task<IEnumerable<CountryView>> SearchCountries(string searchText)
    {
        var response = await _countryService.GetCountryQueryAsync(new GetCountryQueryRequest() { SearchTerm = searchText });
        Countries = response.Countries;

        return response.Countries;
    }

    public static long ConvertCountry(CountryView? c)
       => c?.Id ?? default;

    public CountryView? LoadSelectedCountry(long id)
      => Countries.FirstOrDefault(c => c.Id == id);

    private Task Close()
    {
        ShowUpdateSettlementModal = false;
        return ShowUpdateSettlementModalChanged.InvokeAsync(ShowUpdateSettlementModal);
    }
}
