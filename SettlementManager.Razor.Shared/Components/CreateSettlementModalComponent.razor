@using SettlementManager.Contract
@using SettlementManager.Messaging.Request
@using SettlementManager.Messaging.View
@using SettlementManager.Model
@using SettlementManager.Razor.Shared.Pages
@using Blazored.Typeahead;

@inject ISettlementService _settlementService;
@inject ICountryService _countryService;

<div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">  
    <div class="modal-dialog" role="document">  
        <div class="modal-content">  
            <div class="modal-header">  
                <h5 class="modal-title" id="titleLabel">Create Settlement</h5>  
                <button type="button" class="close"  data-dismiss="modal" @onclick="Close" aria-label="Close">  
                    <span aria-hidden="true">×</span>  
                </button>  
            </div>  
            <div class="modal-body">  
                @if (Loading)
                {
                    <div class="d-flex justify-content-center">
                      <div class="spinner-border" role="status">
                      </div>
                   </div>
                }
                else
                {
                     <EditForm Model="@NewSettlement" OnValidSubmit="@CreateSettlement">  
                    <DataAnnotationsValidator />  
                    <div class="form-group">  
                        <label for="name">Name: </label>  
                        <InputText id="name" class="form-control" @bind-Value="@NewSettlement.Name" placeholder="Enter name"></InputText>  
                        <ValidationMessage For="@(() => NewSettlement.Name)" />  
                    </div>  
                    <br />
                    <div class="form-group">  
                        <label for="psotalCode">Postal Code: </label>  
                        <InputText id="psotalCode" class="form-control" @bind-Value="@NewSettlement.PostalCode" placeholder="Enter postal code"></InputText>  
                        <ValidationMessage For="@(() => NewSettlement.PostalCode)" />  
                    </div> 
                    <br />
                   @* <div class="form-group">  
                        <label for="psotalCode">Country: </label>  
                        <InputSelect @bind-Value=@NewSettlement.CountryId>
                            @foreach (var display in Countries)
                            {
                                <option value=@display.Id>@display.Name</option>
                            }
                        </InputSelect> 
                        <ValidationMessage For="@(() => NewSettlement.CountryId)" />  
                    </div>*@
                    <div class="form-group">
                        <label for="country">Country: </label>
                            <BlazoredTypeahead
                                SearchMethod="SearchCountries" 
                                ConvertMethod="ConvertCountry" 
                                MinimumLength="2"
                                @bind-Value="@NewSettlement.CountryId" 
                                placeholder="Search by country name..."
                            >
                                <SelectedTemplate Context="countryId">
                                    @{
                                        var selectedCountry = LoadSelectedCountry(countryId);

                                        <text>@selectedCountry?.Name</text>
                                    }
                                </SelectedTemplate>
                                <ResultTemplate Context="country">
                                    @country.Name
                                </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <br>                   
                    <button type="submit" class="btn btn-primary">Create Settlement</button>  
                    <a class="btn btn-outline-primary" @onclick="@Close">Close</a>  
                </EditForm>  
                }
            </div>  
        </div>  
    </div>  
</div>  

@code {
    [CascadingParameter]
    private Settlements _Parent { get; set; }

    [Parameter]
    public bool ShowCreateSettlementModal { get; set; }
    [Parameter]
    public EventCallback<bool> ShowCreateSettlementModalChanged { get; set; }

    private CreateSettlementView NewSettlement { get; set; } 
    private IEnumerable<CountryView> Countries { get; set; }

    private bool Loading { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        NewSettlement = new CreateSettlementView();

        //var response = await _countryService.GetCountriesAsync(new GetCountriesRequest());
        //Countries = response.Countries;
        Countries = new List<CountryView>();

        Loading = false;
    }

    private async Task CreateSettlement()
    {
        await _settlementService.CreateSettlementAsync(
            new CreateSettlementRequest
                {
                    Settlement = NewSettlement
                }
        );

        ShowCreateSettlementModal = false;
        await ShowCreateSettlementModalChanged.InvokeAsync(ShowCreateSettlementModal);
        await _Parent.InitializeSettlements();
    }

    public async Task<IEnumerable<CountryView>> SearchCountries(string searchText)
    {
        var response = await _countryService.GetCountryQueryAsync(new GetCountryQueryRequest() { SearchTerm = searchText });
        Countries = response.Countries;

        return response.Countries;
    }

    public static long ConvertCountry(CountryView? c)
        => c?.Id ?? default;

    public CountryView? LoadSelectedCountry(long id)
      => Countries.FirstOrDefault(c => c.Id == id);

    private Task Close()
    {
        ShowCreateSettlementModal = false;
        return ShowCreateSettlementModalChanged.InvokeAsync(ShowCreateSettlementModal);
    }
}
